# Copyright the Hyperledger Fabric contributors. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0

name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)
trigger:
  branches:
    include:
      - main
  tags:
    include:
    - v*
pr:
- main

schedules:
  - cron: "0 23 * * *"
    displayName: "Nightly build"
    branches:
      include:
        - main
    always: true

variables:
  - group: credentials
  - group: JARSigningPublish
  - name: GATEWAY_VERSION
    value: 1.1.0
  - name: BUILD_DATE
    value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  - name: BUILD_NUMBER
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: GOPATH
    value: $(Agent.BuildDirectory)/go
  - name: PATH
    value: $(Agent.BuildDirectory)/go/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
  - name: GOVER
    value: 1.17.8
  - name: NODEVER
    value: 14.x
  - name: JAVAVER
    value: 8

stages:
- stage: VerifyVersions
  jobs:
  - job: VerifyNodeModuleVersion
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    steps:
      - checkout: self
      - script: |
          PACKAGE_GATEWAY_VERSION=$(jq --raw-output .version package.json)
          echo "Expected version: ${GATEWAY_VERSION}"
          echo "package.json version: ${PACKAGE_GATEWAY_VERSION}"
          [ "${PACKAGE_GATEWAY_VERSION}" = "${GATEWAY_VERSION}" ] || exit 1
        displayName: Check Node package version
        workingDirectory: $(System.DefaultWorkingDirectory)/node
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
  - job: VerifyJavaArtifactVersion
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    steps:
      - checkout: self
      - script: |
          POM_GATEWAY_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Expected version: ${GATEWAY_VERSION}"
          echo "pom.xml version: ${POM_GATEWAY_VERSION}"
          [ "${POM_GATEWAY_VERSION%-SNAPSHOT}" = "${GATEWAY_VERSION}" ] || exit 1
        displayName: Check Java artifact version
        workingDirectory: $(System.DefaultWorkingDirectory)/java
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
  # The Go module version is the git tag
  - job: VerifyGoModuleVersion
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    steps:
      - checkout: self
      - script: |
          echo "Build source branch: ${SOURCE_BRANCH}"
          GO_GATEWAY_VERSION=${SOURCE_BRANCH#refs/tags/v}
          echo "Expected version: ${GATEWAY_VERSION}"
          echo "Go module version (git tag): ${GO_GATEWAY_VERSION}"
          [ "${GO_GATEWAY_VERSION}" = "${GATEWAY_VERSION}" ] || exit 1
        displayName: Check Go module version
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
          SOURCE_BRANCH: $(Build.SourceBranch)
- stage: Docs
  dependsOn: VerifyVersions
  jobs:
  - job: GenerateNodeDocs
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - script: make generate-docs-node
      displayName: Generate Node docs
    - publish: $(System.DefaultWorkingDirectory)/node/apidocs
      artifact: NodeDocs
  - job: GenerateJavaDocs
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: 17
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    - script: make generate-docs-java
      displayName: Generate Java docs
    - publish: $(System.DefaultWorkingDirectory)/java/target/site/apidocs
      artifact: JavaDocs
- stage: Test
  dependsOn: VerifyVersions
  jobs:
  - job: UnitTestGo
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps_hsm.yml
    - script: make generate unit-test-go-pkcs11
      displayName: Run Go unit tests with pkcs11
  - job: UnitTestNode
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - task: NodeTool@0
      inputs:
        versionSpec: $(NODEVER)
    - script: make unit-test-node
      displayName: Run Node unit tests
    - publish: $(System.DefaultWorkingDirectory)/node
      artifact: NodeBuild
  - job: UnitTestJava
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: $(JAVAVER)
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    - script: make unit-test-java
      displayName: Run Java unit tests
  #   - script: bash <(curl https://codecov.io/bash) -t $CODECOV_UPLOAD_TOKEN
  #     env:
  #       CODECOV_UPLOAD_TOKEN: $(CODECOV_UPLOAD_TOKEN)
  #     displayName: Upload coverage to Codecov

  - job: ScenarioTestGo
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps_hsm_ca.yml
    - script: make pull-latest-peer scenario-test-go
      displayName: Run Go SDK scenario tests
      env:
        # TODO: update this variable name in the Makefile
        JENKINS_URL: true

  - job: ScenarioTestNode
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    strategy:
      matrix:
        Node14:
          NODEVER: 14.x
        Node16:
          NODEVER: 16.x
    steps:
    - template: install_deps_hsm_ca.yml
    - task: NodeTool@0
      inputs:
        versionSpec: $(NODEVER)
    - script: go install -tags pkcs11 github.com/hyperledger/fabric-ca/cmd/fabric-ca-client@latest
      displayName: Install Fabric-ca-client with HSM Support
    - script: make pull-latest-peer scenario-test-node
      displayName: Run Node SDK scenario tests
      env:
        # TODO: update this variable name in the Makefile
        JENKINS_URL: true

  - job: ScenarioTestJava
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    strategy:
      matrix:
        Java8:
          JAVAVER: 8
        Java11:
          JAVAVER: 11
        Java17:
          JAVAVER: 17
    steps:
      - template: install_deps.yml
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: $(JAVAVER)
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - script: make pull-latest-peer scenario-test-java
        displayName: Run Java SDK scenario tests
        env:
          # TODO: update this variable name in the Makefile
          JENKINS_URL: true

# Only publish on scheduled builds and tagged releases
- stage: Publish
  dependsOn: [Test, Docs]
  condition: and(succeeded('Test'), or(eq(variables['Build.Reason'], 'Schedule'), startsWith(variables['Build.SourceBranch'], 'refs/tags')))
  jobs:
  - job: PublishDocs
    pool:
      vmImage: ubuntu-20.04
    steps:
    - checkout: self
    - script: |
        git checkout gh-pages
        git clean -xdf
        rm -Rf main/api/
        mkdir -p main/api/java main/api/node
      displayName: 'Remove old api docs'
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: JavaDocs
        path: $(Build.SourcesDirectory)/main/api/java
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: NodeDocs
        path: $(Build.SourcesDirectory)/main/api/node
    - publish: $(System.DefaultWorkingDirectory)
      artifact: GhPages
    - script: |
        git config --global user.email "hlfdev.azp@gmail.com"
        git config --global user.name "Hyperledger Bot"
        git add -A
        git commit -m "Publishing GitHub Pages [skip ci]"
        git push https://$(GITHUB-PAT)@github.com/$(Build.Repository.Name).git gh-pages
      displayName: 'Update gh-pages branch'
  - job: PublishNode
    pool:
      vmImage: ubuntu-20.04
    steps:
      - download: current
        artifact: NodeBuild
      - task: NodeTool@0
        inputs:
          versionSpec: $(NODEVER)
      - script: |
          touch $(Agent.TempDirectory)/.npmrc
          echo '##vso[task.setvariable variable=NPM_CONFIG_USERCONFIG]$(Agent.TempDirectory)/.npmrc'
        displayName: 'create user .npmrc file'
      - script: |
          npm config set registry https://registry.npmjs.org/
          npm config set git-tag-version false
          npm config ls
        displayName: set npm config
      - task: npmAuthenticate@0
        inputs:
          workingFile: '$(Agent.TempDirectory)/.npmrc'
          customEndpoint: 'npm'
      # DO NOT set prerelease version for tagged releases!
      - script: npm version ${GATEWAY_VERSION}-dev.${BUILD_DATE}.${BUILD_NUMBER}
        displayName: Set prerelease version
        condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
        workingDirectory: $(Pipeline.Workspace)/NodeBuild
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
          BUILD_DATE: $(BUILD_DATE)
          BUILD_NUMBER: $(BUILD_NUMBER)
      - script: |
          npm publish --access public --tag unstable
        displayName: npm publish unstable
        condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
        workingDirectory: $(Pipeline.Workspace)/NodeBuild
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
          BUILD_DATE: $(BUILD_DATE)
          BUILD_NUMBER: $(BUILD_NUMBER)
      - script: |
          npm publish --access public --tag latest
        displayName: npm publish latest
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
        workingDirectory: $(Pipeline.Workspace)/NodeBuild
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
          BUILD_DATE: $(BUILD_DATE)
          BUILD_NUMBER: $(BUILD_NUMBER)
  - job: PublishJava
    pool:
      vmImage: ubuntu-20.04
    steps:
      - task: JavaToolInstaller@0
        inputs:
          versionSpec: $(JAVAVER)
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'
      - task: DownloadSecureFile@1
        name: privateKey
        displayName: Download private key
        inputs:
          secureFile: private-key.asc
      - script: |
          GPG_TTY=$(tty)
          export GPG_TTY
          gpg --batch --import ${PRIVATE_KEY}
        displayName: Import private key
        env:
          PRIVATE_KEY: $(privateKey.secureFilePath)
      - task: MavenAuthenticate@0
        inputs:
          mavenServiceConnections: maven-artifactory
      # DO NOT set prerelease version for tagged releases!
      - script: mvn --batch-mode versions:set -DnewVersion=${GATEWAY_VERSION}-dev-${BUILD_DATE}-${BUILD_NUMBER}
        displayName: Set prerelease version
        condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags'))
        workingDirectory: $(System.DefaultWorkingDirectory)/java
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
          BUILD_DATE: $(BUILD_DATE)
          BUILD_NUMBER: $(BUILD_NUMBER)
      - script: mvn --batch-mode versions:set -DnewVersion=${GATEWAY_VERSION}
        displayName: Set release version
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
        workingDirectory: $(System.DefaultWorkingDirectory)/java
        env:
          GATEWAY_VERSION: $(GATEWAY_VERSION)
          BUILD_DATE: $(BUILD_DATE)
          BUILD_NUMBER: $(BUILD_NUMBER)
      - script: |
          GPG_TTY=$(tty)
          export GPG_TTY
          mvn --batch-mode -P release deploy
        displayName: Deploy to artifactory
        workingDirectory: $(System.DefaultWorkingDirectory)/java
        env:
          MAVEN_OPTS: -Dmaven.test.skip=true -Dgpg-keyname=$(JAR-Signing-Id) -Dgpg.passphrase=$(JAR-Signing-Password)
      - publish: $(System.DefaultWorkingDirectory)/java
        artifact: JavaBuild
