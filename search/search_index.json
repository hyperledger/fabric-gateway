{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>The Fabric Gateway is a core component of a Hyperledger Fabric blockchain network, and coordinates the actions required to submit transactions and query ledger state on behalf of client applications. By using the Gateway, client applications only need to connect to a single endpoint in a Fabric network. For a detailed description the Fabric Gateway, refer to the architecture reference in the main Fabric documentation.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The Fabric Gateway client API is available for several programming languages to support the development of client applications that interact with a Fabric network using the Gateway.</p>"},{"location":"#go","title":"Go","text":"<ul> <li>Quickstart guide</li> <li>API documentation</li> </ul>"},{"location":"#node","title":"Node","text":"<ul> <li>Quickstart guide</li> <li>API documentation</li> </ul>"},{"location":"#java","title":"Java","text":"<ul> <li>Quickstart guide</li> <li>API documentation</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<p>The following tutorials describe how to write client applications using the Fabric Gateway client API:</p> <ul> <li>Running a Fabric Application from the main Fabric documentation describes in detail the Fabric asset-transfer-basic sample.</li> <li>Client Application Development section of the Fabric full-stack-asset-transfer-guide sample.</li> </ul>"},{"location":"#samples","title":"Samples","text":"<p>There are samples for Go, Node, and Java in the fabric-samples repository, which are a great place to start if you want to try out the Fabric Gateway.</p> <ul> <li>asset-transfer-basic for examples of transaction submit and evaluate.</li> <li>asset-transfer-events for examples of chaincode eventing.</li> <li>off_chain_data for examples of block eventing.</li> </ul>"},{"location":"#migration","title":"Migration","text":"<p>If migrating an existing application from one of the legacy Fabric client SDKs, consult the migration guide.</p>"},{"location":"community/","title":"Community","text":"<p>For community discussion related to the Fabric Gateway client API, look at:</p> <ul> <li>The GitHub repository discussions.</li> <li>The <code>#fabric-client-apis</code> channel on Hyperledger Discord (invite link).</li> <li>The Hyperledger Fabric mailing list.</li> </ul>"},{"location":"compatibility/","title":"Compatibility","text":"<p>Each minor release version of Fabric Gateway client API targets the current supported versions of Go, and the current long-term support (LTS) releases of Node and Java. A specific minimum version of Hyperledger Fabric for the Gateway peer is also required for full functionality.</p> <p>The following table shows versions of Fabric, programming language runtimes, and other dependencies that are explicitly tested and that are supported for use with the latest version of the Fabric Gateway client API.</p> Tested Supported Fabric 2.5 2.4.4+ Go 1.21, 1.22 1.21, 1.22 Node 18, 20 18, 20 Java 8, 11, 17, 21 8, 11, 17, 21 Platform Ubuntu 22.04"},{"location":"migration/","title":"Migration guide","text":"<p>This page documents key considerations when rewriting an existing application, written using legacy Hyperledger Fabric client SDKs, to the Fabric Gateway client API.</p>"},{"location":"migration/#fabric-programming-model","title":"Fabric programming model","text":"<p>The Fabric Gateway client API is an evolution of the legacy SDKs and the Fabric programming model. The API structure and capability remain broadly the same as the legacy SDKs. Similarities include:</p> <ul> <li>Gateway: connection to Fabric peer(s) providing access to blockchain networks.</li> <li>Network: blockchain network of nodes hosting a shared ledger (analogous to a channel).</li> <li>Contract: smart contract deployed to a blockchain network.</li> <li>Submit transaction: invoke a smart contract transaction function to update ledger state.</li> <li>Evaluate transaction: invoke a smart contract transaction function to query ledger state.</li> <li>Chaincode events: receive events emitted by committed transactions to trigger business processes.</li> <li>Block events: receive blocks committed to the ledger.</li> <li>Event checkpointing: persist current event position to support resume of eventing.</li> </ul> <p>The high level API to connect a Gateway instance, and submit or evaluate a transaction remains almost identical.</p> <p>For more advanced transaction invocations, such as those involving transient data, the legacy SDKs provide a <code>createTransaction()</code> method on the Contract object, which allows the client application to specify additional invocation parameters (see Go, Node, and Java documentation). The Fabric Gateway client API provides a <code>newProposal()</code> method on the Contract object to perform the same function (see Go, Node, and Java documentation).</p>"},{"location":"migration/#key-differences","title":"Key differences","text":"<p>The key API and behavioral differences that need to be considered when switching from legacy SDKs to the Fabric Gateway client API are:</p> <ul> <li>gRPC connections are managed by the application, and can be shared by Gateway instances.</li> <li>Connection profiles are not needed.</li> <li>Wallets are not needed, with the application choosing how to manage credential storage.</li> <li>Endorsement requirements generally no longer need to be specified.</li> <li>Event reconnect is controlled by the client application.</li> </ul> <p>More detail and recommendations for each of these items is provided below.</p>"},{"location":"migration/#grpc-connections","title":"gRPC connections","text":"<p>In the legacy SDKs, each Gateway instance maintains internal gRPC connections to network nodes used to evaluate and submit transactions, and to obtain events. Many gRPC connections may be created for each Gateway instance, and these connections are not shared with other Gateway instances. Since there is significant overhead associated with creating gRPC connections, this can cause resource issues.</p> <p>In the Fabric Gateway client API, each Gateway instance uses a single gRPC connection to the Fabric Gateway service for all operations. The Gateway instance's gRPC connection is provided by the client application, and it can be shared by multiple Gateway instances. This allows the client application complete control of gRPC connection configuration and resource allocation.</p> <p>The API documentation contains examples of creating a gRPC connection and using this to connect a Gateway instance for Go, Node and Java.</p>"},{"location":"migration/#connection-profiles","title":"Connection profiles","text":"<p>The Fabric Gateway client API does not use common connection profiles. Instead, only the endpoint address of the Fabric Gateway service is required to establish a gRPC connection that will be used when connecting a Gateway instance. Since the Fabric Gateway service is provided by Fabric peers, the endpoint address may be one of the peer addresses that would be defined in a connection profile. It could also be the address of a load balancer or ingress controller that forwards connections to network peers, providing high availability.</p>"},{"location":"migration/#wallets","title":"Wallets","text":"<p>The legacy SDKs provide wallets for credential management. Wallets perform two functions:</p> <ol> <li>Persistent credential storage.</li> <li>Configuration of the Gateway client based on the type of credentials (for example, identities managed by a Hardware Security Module).</li> </ol> <p>Using the Fabric Gateway client API, the mechanism for storing credentials is a choice for the client application. The application may continue using the legacy SDKs to access credentials stored in a wallet, or may use a different mechanism for storing and accessing credentials.</p> <p>To connect a Gateway instance, the application simply provides an Identity object and a signing implementation. Helper functions are provided to create an Identity object from an X.509 certificate, and also to create a signing implementation from either a private key or an HSM-managed identity. To make use of alternative signing mechanisms, the application may provide its own signing implementation.</p>"},{"location":"migration/#endorsement-requirements","title":"Endorsement requirements","text":"<p>When using the legacy SDKs in more complex scenarios, such as those involving private data collections, chaincode-to-chaincode calls, or key-based endorsement policies, it is often necessary for the client application to explicitly specify endorsement requirements for a transaction invocation. This may be in the form of specifying chaincode interests, endorsing organizations, or endorsing peers.</p> <p>Using the Fabric Gateway client API, it is generally not necessary for the client application to specify endorsement requirements. The Fabric Gateway service dynamically determines the endorsement requirements for a given transaction invocation and uses the most appropriate peers to obtain endorsement.</p> <p>For transaction proposals that contain transient data, there are two notable scenarios that do require the application to explicitly specify the organizations that may be used for endorsement:</p> <ol> <li>The Fabric Gateway service's organization is unable to endorse the transaction proposal.</li> <li>Transactions that perform blind writes to private data collections from which they do not have read permission.</li> </ol> <p>These restrictions are in place to ensure that private data is not distributed to organizations that should not have access to it.</p> <p>It is recommended to only specify endorsing organizations in cases where it is specifically required.</p>"},{"location":"migration/#event-reconnect","title":"Event reconnect","text":"<p>In the event of a peer or network failure during event listening, the legacy SDKs transparently attempt to reestablish connection and continue delivering events once successful reconnection is achieved. The Fabric Gateway client API surfaces eventing errors to the client application at the point it requests the next event. To reestablish eventing, the application must initiate a new event listening session with an appropriate start position.</p> <p>Event checkpointing tracks the current event position and can be used to resume eventing at the correct start position on reconnect.</p>"},{"location":"main/api/java/legal/jquery/","title":"Jquery","text":""},{"location":"main/api/java/legal/jquery/#jquery-v361","title":"jQuery v3.6.1","text":""},{"location":"main/api/java/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.6.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n******************************************\n\nThe jQuery JavaScript Library v3.6.1 also includes Sizzle.js\n\nSizzle.js includes the following license:\n\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/sizzle\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n*********************\n\n</code></pre>"},{"location":"main/api/java/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"main/api/java/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"main/api/java/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"}]}