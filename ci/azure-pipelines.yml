# Copyright the Hyperledger Fabric contributors. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0

name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)
trigger:
- main
pr:
- main

schedules:
  - cron: "0 23 * * *"
    displayName: "Nightly build"
    branches:
      include:
        - main

variables:
  GOPATH: $(Agent.BuildDirectory)/go
  PATH: $(Agent.BuildDirectory)/go/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
  GOVER: 1.15.6
  NODEVER: 12.16.1

stages:
- stage: Test
  jobs:
  - job: UnitTestGo
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - checkout: self
    - script: make generate unit-test-go
      displayName: Run Go unit tests
  - job: UnitTestNode
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - checkout: self
    - script: make unit-test-node
      displayName: Run Node unit tests
    - publish: $(System.DefaultWorkingDirectory)/node
      artifact: NodeBuild
  - job: UnitTestJava
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - checkout: self
    - script: make unit-test-java
      displayName: Run Java unit tests
  #   - script: bash <(curl https://codecov.io/bash) -t $CODECOV_UPLOAD_TOKEN
  #     env:
  #       CODECOV_UPLOAD_TOKEN: $(CODECOV_UPLOAD_TOKEN)
  #     displayName: Upload coverage to Codecov

  - job: ScenarioTestGo
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - checkout: self
    - script: make pull-latest-peer scenario-test-go
      displayName: Run Go SDK scenario tests
      env:
        # TODO: update this variable name in the Makefile
        JENKINS_URL: true

  - job: ScenarioTestNode
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
    - template: install_deps.yml
    - checkout: self
    - script: make pull-latest-peer scenario-test-node
      displayName: Run Node SDK scenario tests
      env:
        # TODO: update this variable name in the Makefile
        JENKINS_URL: true

  - job: ScenarioTestJava
    pool:
      vmImage: ubuntu-20.04
    dependsOn: []
    timeoutInMinutes: 60
    steps:
      - template: install_deps.yml
      - checkout: self
      - script: make pull-latest-peer scenario-test-java
        displayName: Run Java SDK scenario tests
        env:
          # TODO: update this variable name in the Makefile
          JENKINS_URL: true

- stage: Publish
  dependsOn: Test
  condition: and(succeeded('Test'), eq(variables['Build.Reason'], 'Schedule'))
  jobs:
  - job: PublishNode
    variables:
      buildDate: $[format('{0:yyyyMMdd}', pipeline.startTime)]
      buildNumber: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
    steps:
      - download: current
        artifact: NodeBuild
      - task: NodeTool@0
        inputs:
          versionSpec: $(NODEVER)
      - script: |
          touch $(Agent.TempDirectory)/.npmrc
          echo '##vso[task.setvariable variable=NPM_CONFIG_USERCONFIG]$(Agent.TempDirectory)/.npmrc'
        displayName: 'create user .npmrc file'
      - script: |
          npm config set registry https://registry.npmjs.org/
          npm config set git-tag-version false
          npm config ls
        displayName: 'set npm config'
      - task: npmAuthenticate@0
        inputs:
          workingFile: '$(Agent.TempDirectory)/.npmrc'
          customEndpoint: 'npm'
      - script: |
          npm version prepatch --preid=dev.${BUILD_DATE}.${BUILD_NUMBER}
        displayName: 'set prerelease version'
        workingDirectory: $(Pipeline.Workspace)/NodeBuild
        env:
          BUILD_DATE: $(buildDate)
          BUILD_NUMBER: $(buildNumber)
      - script: |
          npm publish --tag unstable
        displayName: 'npm publish'
        workingDirectory: $(Pipeline.Workspace)/NodeBuild
